# -*- coding: utf-8 -*-
"""ProjectClassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14XYjLDMJlldhvj2roJGVJynISPxMt0Id
"""

import pandas as pd
import numpy as np
import math
from numpy import linalg as LA

import io

from google.colab import files
uploaded = files.upload()
df = pd.read_csv(io.StringIO(uploaded['CogDecline.csv'].decode('utf-8')))
print(df)

df.describe()

X=df.iloc[:,1:105]
y=df.iloc[:,-2]
y[y=='NL'] = 0
y[y=='MCI'] = 1
y[y=='Dementia']=2
y=y.astype('category')
print(X)
print(y)

from sklearn.svm import SVR
import matplotlib.pyplot as plt
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, accuracy_score
from sklearn.model_selection import cross_val_score
from sklearn.svm import SVC

X_train, X_test, y_train, y_test=train_test_split(X, y, test_size=0.2, random_state=42)

#regr=make_pipeline(StandardScaler(), SVR(C=1.0, epsilon=0.2))
#regre=regr.fit(X_train,y_train)
#y_pred=regre.predict(X_test)
#print(mean_absolute_error(y_test,y_pred))
#mean_squared_error(y_test,y_pred)
#r2_score(y_test,y_pred)
print(y_train)
from sklearn.linear_model import LogisticRegression
clf=LogisticRegression(random_state=42).fit(X_train, y_train)
clff=make_pipeline(StandardScaler(), SVC(gamma='auto', kernel='rbf')).fit(X_train, y_train)
y_pred=clf.predict(X_test)
accuracy_score(y_pred, y_test)
np.mean(cross_val_score(clf, X, y, cv=5))

pca = PCA(n_components=100)
pca.fit(X)
X_pc=pca.transform(X)
y=y.astype('category')
print(y)
#print(X.shape)
#print(X_pca.shape)
X_pc_train, X_pc_test, y_pc_train, y_pc_test=train_test_split(X_pc, y, test_size=0.2, random_state=None)

clf_pc=LogisticRegression(random_state=0).fit(X_pc_train,y_pc_train)
clff_pc=make_pipeline(StandardScaler(), SVC(gamma='auto')).fit(X_pc_train, y_pc_train)
y_pc_pred=clff_pc.predict(X_pc_test)
#accuracy_score(y_pca_pred, y_pca_test)
np.mean(cross_val_score(clff_pc, X_pc, y, cv=5))



from sklearn.decomposition import PCA

# Creating an PCA object (pca) and extracting the two most important components/features (n_components=2)
pca = PCA(n_components=70)
pca.fit(X)
X_pca=pca.transform(X)
#print(X.shape)
#print(X_pca.shape)
X_pca_train, X_pca_test, y_pca_train, y_pca_test=train_test_split(X_pca, y, test_size=0.2, random_state=42)
regre=regr.fit(X_pca_train,y_pca_train)
y_pca_pred=regre.predict(X_pca_test)
print(mean_absolute_error(y_pca_test,y_pca_pred))
print('mean_suare_error:', mean_squared_error(y_test,y_pred))
print(r2_score(y_pca_test,y_pca_pred))

from sklearn.linear_model import ElasticNet
from sklearn.datasets import make_regression
print(y_train)
Elas=ElasticNet(random_state=0)
Elass=Elas.fit(X_train, y_train)
Elas_ypred=Elass.predict(X_test)
print('mean_suare_error:', mean_squared_error(y_test, Elas_ypred))
r2_score(y_test, Elas_ypred)
print('MAE:', mean_absolute_error(y_test, Elas_ypred))

# LDA classification 
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from numpy import std
from sklearn.datasets import make_classification
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
X_train, X_test, y_train, y_test=train_test_split(X, y, test_size=0.2, random_state=42)
cv = KFold(n_splits=10, random_state=1, shuffle=True)
model=LinearDiscriminantAnalysis()
model.fit(X_train, y_train)

scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)
print(np.mean(scores))

#LDA classification with PCA
from sklearn.decomposition import PCA

pca = PCA(n_components=25)
pca.fit(X)
X_pca=pca.transform(X)
cv = KFold(n_splits=10, random_state=1, shuffle=True)
model=LinearDiscriminantAnalysis()
model.fit(X_train, y_train)

scores_pca = cross_val_score(model, X_pca, y, scoring='accuracy', cv=cv, n_jobs=-1)
print(np.mean(scores_pca))

#SVM Classification
from sklearn.svm import SVC
model_SVC=SVC(kernel='rbf')

scores_SVC = cross_val_score(model_SVC, X, y, scoring='accuracy', cv=cv, n_jobs=-1)
print(np.mean(scores_SVC))

#SVM PCA

scores_SVM_pca = cross_val_score(model_SVC, X_pca, y, scoring='accuracy', cv=cv, n_jobs=-1)
print(np.mean(scores_SVM_pca))