# -*- coding: utf-8 -*-
"""ProjectRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o3WDUItD_YnBWwigGcYX3Y8cJ0g605GT
"""

import pandas as pd
import numpy as np
import math
from numpy import linalg as LA

import io

from google.colab import files
uploaded = files.upload()
df = pd.read_csv(io.StringIO(uploaded['Decline.csv'].decode('utf-8')))
print(df)

X=df.iloc[:,1:105]
y=df.iloc[:,-1]
print(X)
df.describe()

from sklearn.svm import SVR
import matplotlib.pyplot as plt
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split



X_train, X_test, y_train, y_test=train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestRegressor
regr_RandomForest=RandomForestRegressor(max_depth=4, random_state=0)
RegressionRadomForrest=regr_RandomForest.fit(X_train, y_train)
y_RandomForestPred=RegressionRadomForrest.predict(X_test)
print('mean_square_error:', mean_squared_error(y_test, y_RandomForestPred))
print('r2:', r2_score(y_test, y_RandomForestPred))
print('MAE:', mean_absolute_error(y_test, y_RandomForestPred))
plt.scatter(y_test, y_RandomForestPred)

from sklearn.decomposition import PCA

pca = PCA(n_components=25)
pca.fit(X)
X_pca=pca.transform(X)
X_pca_train, X_pca_test, y_pca_train, y_pca_test=train_test_split(X_pca, y, test_size=0.2, random_state=42)
from sklearn.ensemble import RandomForestRegressor
regr_RandomForest=RandomForestRegressor(max_depth=4, random_state=0)
RegressionRF_pca=regr_RandomForest.fit(X_pca_train, y_pca_train)
y_pca_RandomForestPred=RegressionRF_pca.predict(X_pca_test)
print('mean_square_error:', mean_squared_error(y_pca_test, y_pca_RandomForestPred))
print('r2:', r2_score(y_pca_test, y_pca_RandomForestPred))
print('MAE:', mean_absolute_error(y_pca_test, y_pca_RandomForestPred))

from sklearn.svm import SVR
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler

SVRRegr=SVR(C=35, epsilon=0.001, kernel='rbf')
RegressionSVR=SVRRegr.fit(X_train, y_train)
y_SVRPred=RegressionSVR.predict(X_test)
print('mean_square_error:', mean_squared_error(y_test, y_SVRPred))
print('r2:', r2_score(y_test, y_SVRPred))
print('MAE:', mean_absolute_error(y_test, y_SVRPred))
plt.scatter(y_test, y_SVRPred)

from sklearn.decomposition import PCA

pca = PCA(n_components=60)
pca.fit(X)
X_pca=pca.transform(X)
X_pca_train, X_pca_test, y_pca_train, y_pca_test=train_test_split(X_pca, y, test_size=0.2, random_state=None)

SVRRegr=SVR(C=10, epsilon=0.001, kernel='rbf')
RegressionSVR_PCA=SVRRegr.fit(X_pca_train, y_pca_train)
y_pca_SVRPred=RegressionSVR_PCA.predict(X_pca_test)
print('mean_square_error:', mean_squared_error(y_pca_test, y_pca_SVRPred))
print('r2:', r2_score(y_pca_test, y_pca_SVRPred))
print('MAE:', mean_absolute_error(y_pca_test, y_pca_SVRPred))

from sklearn import linear_model
Lasso = linear_model.Lasso(alpha=1.3)
regrLasso=Lasso.fit(X_train, y_train)
y_LassPred=regrLasso.predict(X_test)
print('r2:', r2_score(y_LassPred, y_test))

from sklearn.linear_model import ElasticNet
from sklearn.datasets import make_regression

regr = ElasticNet(random_state=0)
regrElastic=regr.fit(X_train, y_train)
y_ElasPred=regrElastic.predict(X_test)
print('r2:', r2_score(y_ElasPred, y_test))

from sklearn.tree import DecisionTreeRegressor
DT = DecisionTreeRegressor(max_depth=5)
DTRegre=DT.fit(X_train, y_train)
y_DTPred=DTRegre.predict(X_test)
print('r2:', r2_score(y_DTPred, y_test))
print(y_DTPred)
plt.scatter(y_test, y_DTPred)

from sklearn.neighbors import KNeighborsRegressor
neigh = KNeighborsRegressor(n_neighbors=1)
neigh.fit(X_train, y_train)
y_neighPred=neigh.predict(X_test)
print('r2:', r2_score(y_neighPred, y_test))
print(y_neighPred)
import matplotlib.pyplot as plt
plt.scatter(y_test, y_neighPred)